import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.25ff06b1.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"懒式初始化","slug":"懒式初始化","link":"#懒式初始化","children":[]}],"relativePath":"article/backend/Csharp/基础知识/1.MAUI.md","filePath":"article/backend/Csharp/基础知识/1.MAUI.md","lastUpdated":1707839101000}'),p={name:"article/backend/Csharp/基础知识/1.MAUI.md"},e=l(`<p>针对跨平台的情况，一般存储本地文件的时候要使用一个跟系统无关的环境变量来拼接路径</p><p>本地文件的存储，Sqlite数据库数据文件存储路径：</p><div class="language-c vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// a safe path to read/write data cross platform</span></span>
<span class="line"><span style="color:#E1E4E8;">public </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> readonly string PoetryDbPath </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">  Path.</span><span style="color:#B392F0;">Combine</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;"> Environment.</span><span style="color:#B392F0;">GetFolderPath</span><span style="color:#E1E4E8;">(Environment.SpecialFolder.LocalApplicationData),</span></span>
<span class="line"><span style="color:#E1E4E8;">  DbFileName);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// a safe path to read/write data cross platform</span></span>
<span class="line"><span style="color:#24292E;">public </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> readonly string PoetryDbPath </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">  Path.</span><span style="color:#6F42C1;">Combine</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;"> Environment.</span><span style="color:#6F42C1;">GetFolderPath</span><span style="color:#24292E;">(Environment.SpecialFolder.LocalApplicationData),</span></span>
<span class="line"><span style="color:#24292E;">  DbFileName);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="懒式初始化" tabindex="-1">懒式初始化 <a class="header-anchor" href="#懒式初始化" aria-label="Permalink to &quot;懒式初始化&quot;">​</a></h2><div class="language-c# vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RelayCommand</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">_navigateCommand</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> RelayCommand </span><span style="color:#B392F0;">NavigateCommand</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  _navigateCommand </span><span style="color:#F97583;">??=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RelayCommand</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">{});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RelayCommand</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">_navigateCommand</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> RelayCommand </span><span style="color:#6F42C1;">NavigateCommand</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">  _navigateCommand </span><span style="color:#D73A49;">??=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RelayCommand</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>程序启动后，只是声明这个Command，等真正用到的时候再进行实例初始化，新的写法如下：可以保障线程安全</p><div class="language-c# vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">XXX</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#6A737D;">  //这里是构造函数</span></span>
<span class="line"><span style="color:#E1E4E8;">   _lazyNavigatedToCommand </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Lazy</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">AsyncRelayCommand</span><span style="color:#E1E4E8;">&gt;(() </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span></span>
<span class="line"><span style="color:#6A737D;">            //your code...</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AsyncRelayCommand</span><span style="color:#E1E4E8;">(NavigatedToCommandFunction);</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Lazy</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">AsyncRelayCommand</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">_lazyNavigatedToCommand</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> AsyncRelayCommand </span><span style="color:#B392F0;">NavigatedToCommand</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  _lazyNavigatedToCommand.Value;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">XXX</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#6A737D;">  //这里是构造函数</span></span>
<span class="line"><span style="color:#24292E;">   _lazyNavigatedToCommand </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Lazy</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">AsyncRelayCommand</span><span style="color:#24292E;">&gt;(() </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">        {</span></span>
<span class="line"><span style="color:#6A737D;">            //your code...</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AsyncRelayCommand</span><span style="color:#24292E;">(NavigatedToCommandFunction);</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Lazy</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">AsyncRelayCommand</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">_lazyNavigatedToCommand</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> AsyncRelayCommand </span><span style="color:#6F42C1;">NavigatedToCommand</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">  _lazyNavigatedToCommand.Value;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div>`,7),o=[e];function c(t,r,i,y,E,d){return a(),n("div",null,o)}const u=s(p,[["render",c]]);export{b as __pageData,u as default};
