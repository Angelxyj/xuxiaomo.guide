import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.ab7e7ee0.js";const F=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"一、全局事件 Global events","slug":"一、全局事件-global-events","link":"#一、全局事件-global-events","children":[{"level":3,"title":"1. 前端到后端","slug":"_1-前端到后端","link":"#_1-前端到后端","children":[]},{"level":3,"title":"2. 后端到前端","slug":"_2-后端到前端","link":"#_2-后端到前端","children":[]}]},{"level":2,"title":"二、窗口级别事件Window-specific events","slug":"二、窗口级别事件window-specific-events","link":"#二、窗口级别事件window-specific-events","children":[{"level":3,"title":"1. 前端到后端","slug":"_1-前端到后端-1","link":"#_1-前端到后端-1","children":[]},{"level":3,"title":"2.后端到前端","slug":"_2-后端到前端-1","link":"#_2-后端到前端-1","children":[]}]}],"relativePath":"article/frontend/tauri/特性/2.事件.md","filePath":"article/frontend/tauri/特性/2.事件.md","lastUpdated":1707839101000}'),p={name:"article/frontend/tauri/特性/2.事件.md"},o=l(`<blockquote><p><code>Tauri</code>的事件系统是一个多生产者多消费者的通信模型，它允许在前端和后端之间传递消息，它和指令系统比较类型，但是使用时必须对负载进行类型检查，它简化了后端到前端的通信，像管道<code>channel</code>一样工作。一个<code>Tauri</code>应用，可以能够监听和发射全局事件和针对特定窗口的事件。</p></blockquote><p>下面对前后端分别进行说明</p><blockquote><p>前端使用事件需要用到<code>evnet</code>和<code>window</code>两个模块，分别对应全局事件和窗口事件，都在<code>@tauri-apps/api</code>这个包里，后端处理事件使用的是<code>App struct</code>和<code>Window trait</code></p></blockquote><h2 id="一、全局事件-global-events" tabindex="-1">一、全局事件 <code>Global events</code> <a class="header-anchor" href="#一、全局事件-global-events" aria-label="Permalink to &quot;一、全局事件 \`Global events\`&quot;">​</a></h2><h3 id="_1-前端到后端" tabindex="-1">1. 前端到后端 <a class="header-anchor" href="#_1-前端到后端" aria-label="Permalink to &quot;1. 前端到后端&quot;">​</a></h3><p>引入<code>event</code>模块，使用<code>emit</code>和<code>listen</code>两个函数</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { emit, listen } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@tauri-apps/api/event&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// listen to the \`click\` event and get a function to remove the event listener</span></span>
<span class="line"><span style="color:#6A737D;">// there&#39;s also a \`once\` function that subscribes to an event and automatically unsubscribes the listener on the first event</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">unlisten</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;click&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// event.event is the event name (useful if you want to use a single callback fn for multiple event types)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// event.payload is the payload object</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// emits the \`click\` event with the object payload</span></span>
<span class="line"><span style="color:#B392F0;">emit</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;click&#39;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  theMessage: </span><span style="color:#9ECBFF;">&#39;Tauri is awesome!&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { emit, listen } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@tauri-apps/api/event&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// listen to the \`click\` event and get a function to remove the event listener</span></span>
<span class="line"><span style="color:#6A737D;">// there&#39;s also a \`once\` function that subscribes to an event and automatically unsubscribes the listener on the first event</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">unlisten</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;click&#39;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">event</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// event.event is the event name (useful if you want to use a single callback fn for multiple event types)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// event.payload is the payload object</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// emits the \`click\` event with the object payload</span></span>
<span class="line"><span style="color:#6F42C1;">emit</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;click&#39;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">  theMessage: </span><span style="color:#032F62;">&#39;Tauri is awesome!&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>监听事件第二个参数是一个回调函数，里面可以拿到<code>event</code>对象，里面包含了后端返回事件的信息，如下是一个测试代码，包含了事件名，<code>id</code>，<code>payload</code>负载，还有<code>windowLabel</code></p><img src="https://gitlab.com/lijing-2008/blogpic/-/raw/main/pictures/2022/12/21_11_14_37_image-20221221111437364.png" alt="image-20221221111437364" style="zoom:50%;"><h3 id="_2-后端到前端" tabindex="-1">2. 后端到前端 <a class="header-anchor" href="#_2-后端到前端" aria-label="Permalink to &quot;2. 后端到前端&quot;">​</a></h3><p>在后端，全局事件管道由<code>App</code>结构暴露出来</p><div class="language-rust vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">tauri</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">Manager</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// the payload type must implement \`Serialize\` and \`Clone\`.</span></span>
<span class="line"><span style="color:#E1E4E8;">#[derive(</span><span style="color:#B392F0;">Clone</span><span style="color:#E1E4E8;">, serde</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">Serialize</span><span style="color:#E1E4E8;">)]</span></span>
<span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Payload</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  message</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">tauri</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">Builder</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">default</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">setup</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">app</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">      // listen to the \`event-name\` (emitted on any window)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> app</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">listen_global</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;event-name&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">event</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">println!</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;got event-name with payload {:?}&quot;</span><span style="color:#E1E4E8;">, event</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">payload</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">      });</span></span>
<span class="line"><span style="color:#6A737D;">      // unlisten to the event using the \`id\` returned on the \`listen_global\` function</span></span>
<span class="line"><span style="color:#6A737D;">      // an \`once_global\` API is also exposed on the \`App\` struct</span></span>
<span class="line"><span style="color:#E1E4E8;">      app</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">unlisten</span><span style="color:#E1E4E8;">(id);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">      // emit the \`event-name\` event to all webview windows on the frontend</span></span>
<span class="line"><span style="color:#E1E4E8;">      app</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">emit_all</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;event-name&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Payload</span><span style="color:#E1E4E8;"> { message</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Tauri is awesome!&quot;</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">into</span><span style="color:#E1E4E8;">() })</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">unwrap</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">Ok</span><span style="color:#E1E4E8;">(())</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">tauri</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">generate_context!</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;failed to run app&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tauri</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">Manager</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// the payload type must implement \`Serialize\` and \`Clone\`.</span></span>
<span class="line"><span style="color:#24292E;">#[derive(</span><span style="color:#6F42C1;">Clone</span><span style="color:#24292E;">, serde</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">Serialize</span><span style="color:#24292E;">)]</span></span>
<span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Payload</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  message</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">tauri</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">Builder</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">default</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">setup</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">|</span><span style="color:#24292E;">app</span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">      // listen to the \`event-name\` (emitted on any window)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> app</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">listen_global</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;event-name&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">event</span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">println!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;got event-name with payload {:?}&quot;</span><span style="color:#24292E;">, event</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">payload</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">      });</span></span>
<span class="line"><span style="color:#6A737D;">      // unlisten to the event using the \`id\` returned on the \`listen_global\` function</span></span>
<span class="line"><span style="color:#6A737D;">      // an \`once_global\` API is also exposed on the \`App\` struct</span></span>
<span class="line"><span style="color:#24292E;">      app</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">unlisten</span><span style="color:#24292E;">(id);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">      // emit the \`event-name\` event to all webview windows on the frontend</span></span>
<span class="line"><span style="color:#24292E;">      app</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">emit_all</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;event-name&quot;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Payload</span><span style="color:#24292E;"> { message</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Tauri is awesome!&quot;</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">into</span><span style="color:#24292E;">() })</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">unwrap</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">Ok</span><span style="color:#24292E;">(())</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">tauri</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">generate_context!</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;failed to run app&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>后端监听到事件得到的结果如下，注意<code>event.payload()</code>返回的是一个<code>Option</code></p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">got</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">click</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">with</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">payload:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Some</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">&quot;{</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#B392F0;">theMessage</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#B392F0;">:</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#B392F0;">Tauri is awesome!</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#B392F0;">}&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">got</span><span style="color:#24292E;"> </span><span style="color:#032F62;">click</span><span style="color:#24292E;"> </span><span style="color:#032F62;">with</span><span style="color:#24292E;"> </span><span style="color:#032F62;">payload:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Some</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">&quot;{</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#6F42C1;">theMessage</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#6F42C1;">:</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#6F42C1;">Tauri is awesome!</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#6F42C1;">}&quot;</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="二、窗口级别事件window-specific-events" tabindex="-1">二、窗口级别事件<code>Window-specific events</code> <a class="header-anchor" href="#二、窗口级别事件window-specific-events" aria-label="Permalink to &quot;二、窗口级别事件\`Window-specific events\`&quot;">​</a></h2><p>其实原理是一样的，只不过事件作用域发生了变化，这个只作用于指定的窗口</p><h3 id="_1-前端到后端-1" tabindex="-1">1. 前端到后端 <a class="header-anchor" href="#_1-前端到后端-1" aria-label="Permalink to &quot;1. 前端到后端&quot;">​</a></h3><p>引入<code>window</code>模块</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { appWindow, WebviewWindow } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@tauri-apps/api/window&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// emit an event that are only visible to the current window</span></span>
<span class="line"><span style="color:#E1E4E8;">appWindow.</span><span style="color:#B392F0;">emit</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;event&#39;</span><span style="color:#E1E4E8;">, { message: </span><span style="color:#9ECBFF;">&#39;Tauri is awesome!&#39;</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// create a new webview window and emit an event only to that window</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">webview</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WebviewWindow</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;window&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">webview.</span><span style="color:#B392F0;">emit</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;event&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// listen</span></span>
<span class="line"><span style="color:#E1E4E8;">appWindow.</span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;event-periodic&#39;</span><span style="color:#E1E4E8;">, ( </span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;"> ) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;listen window-specific event: &#39;</span><span style="color:#E1E4E8;">, res)</span></span>
<span class="line"><span style="color:#E1E4E8;">}).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(( </span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;"> ) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// res也是停止监听的一个句柄</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;listen 成功&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { appWindow, WebviewWindow } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@tauri-apps/api/window&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// emit an event that are only visible to the current window</span></span>
<span class="line"><span style="color:#24292E;">appWindow.</span><span style="color:#6F42C1;">emit</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;event&#39;</span><span style="color:#24292E;">, { message: </span><span style="color:#032F62;">&#39;Tauri is awesome!&#39;</span><span style="color:#24292E;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// create a new webview window and emit an event only to that window</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">webview</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WebviewWindow</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;window&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">webview.</span><span style="color:#6F42C1;">emit</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;event&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// listen</span></span>
<span class="line"><span style="color:#24292E;">appWindow.</span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;event-periodic&#39;</span><span style="color:#24292E;">, ( </span><span style="color:#E36209;">res</span><span style="color:#24292E;"> ) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;listen window-specific event: &#39;</span><span style="color:#24292E;">, res)</span></span>
<span class="line"><span style="color:#24292E;">}).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(( </span><span style="color:#E36209;">res</span><span style="color:#24292E;"> ) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// res也是停止监听的一个句柄</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;listen 成功&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="_2-后端到前端-1" tabindex="-1">2.后端到前端 <a class="header-anchor" href="#_2-后端到前端-1" aria-label="Permalink to &quot;2.后端到前端&quot;">​</a></h3><div class="language-rust vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">tauri</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">{</span><span style="color:#B392F0;">Manager</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Window</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// the payload type must implement \`Serialize\` and \`Clone\`.</span></span>
<span class="line"><span style="color:#E1E4E8;">#[derive(</span><span style="color:#B392F0;">Clone</span><span style="color:#E1E4E8;">, serde</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">Serialize</span><span style="color:#E1E4E8;">)]</span></span>
<span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Payload</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  message</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// init a background process on the command, and emit periodic events only to the window that used the command</span></span>
<span class="line"><span style="color:#E1E4E8;">#[tauri</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">command]</span></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">init_process</span><span style="color:#E1E4E8;">(window</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Window</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">std</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">thread</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">spawn</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">move</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">loop</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      window</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">emit</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;event-name&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Payload</span><span style="color:#E1E4E8;"> { message</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Tauri is awesome!&quot;</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">into</span><span style="color:#E1E4E8;">() })</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">unwrap</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">tauri</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">Builder</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">default</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">setup</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">app</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">      // \`main\` here is the window label; it is defined on the window creation or under \`tauri.conf.json\`</span></span>
<span class="line"><span style="color:#6A737D;">      // the default value is \`main\`. note that it must be unique</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> main_window </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> app</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">get_window</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;main&quot;</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">unwrap</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">      // listen to the \`event-name\` (emitted on the \`main\` window)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> main_window</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;event-name&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">event</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">println!</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;got window event-name with payload {:?}&quot;</span><span style="color:#E1E4E8;">, event</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">payload</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">      });</span></span>
<span class="line"><span style="color:#6A737D;">      // unlisten to the event using the \`id\` returned on the \`listen\` function</span></span>
<span class="line"><span style="color:#6A737D;">      // an \`once\` API is also exposed on the \`Window\` struct</span></span>
<span class="line"><span style="color:#E1E4E8;">      main_window</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">unlisten</span><span style="color:#E1E4E8;">(id);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">      // emit the \`event-name\` event to the \`main\` window</span></span>
<span class="line"><span style="color:#E1E4E8;">      main_window</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">emit</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;event-name&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Payload</span><span style="color:#E1E4E8;"> { message</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Tauri is awesome!&quot;</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">into</span><span style="color:#E1E4E8;">() })</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">unwrap</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">Ok</span><span style="color:#E1E4E8;">(())</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">invoke_handler</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">tauri</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">generate_handler!</span><span style="color:#E1E4E8;">[init_process])</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">tauri</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">generate_context!</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;failed to run app&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tauri</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">{</span><span style="color:#6F42C1;">Manager</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Window</span><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// the payload type must implement \`Serialize\` and \`Clone\`.</span></span>
<span class="line"><span style="color:#24292E;">#[derive(</span><span style="color:#6F42C1;">Clone</span><span style="color:#24292E;">, serde</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">Serialize</span><span style="color:#24292E;">)]</span></span>
<span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Payload</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  message</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// init a background process on the command, and emit periodic events only to the window that used the command</span></span>
<span class="line"><span style="color:#24292E;">#[tauri</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">command]</span></span>
<span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">init_process</span><span style="color:#24292E;">(window</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Window</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">std</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">thread</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">spawn</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">move</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">loop</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      window</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">emit</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;event-name&quot;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Payload</span><span style="color:#24292E;"> { message</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Tauri is awesome!&quot;</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">into</span><span style="color:#24292E;">() })</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">unwrap</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">tauri</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">Builder</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">default</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">setup</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">|</span><span style="color:#24292E;">app</span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#6A737D;">      // \`main\` here is the window label; it is defined on the window creation or under \`tauri.conf.json\`</span></span>
<span class="line"><span style="color:#6A737D;">      // the default value is \`main\`. note that it must be unique</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> main_window </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> app</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">get_window</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;main&quot;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">unwrap</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">      // listen to the \`event-name\` (emitted on the \`main\` window)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> main_window</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;event-name&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">|</span><span style="color:#24292E;">event</span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">println!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;got window event-name with payload {:?}&quot;</span><span style="color:#24292E;">, event</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">payload</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">      });</span></span>
<span class="line"><span style="color:#6A737D;">      // unlisten to the event using the \`id\` returned on the \`listen\` function</span></span>
<span class="line"><span style="color:#6A737D;">      // an \`once\` API is also exposed on the \`Window\` struct</span></span>
<span class="line"><span style="color:#24292E;">      main_window</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">unlisten</span><span style="color:#24292E;">(id);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">      // emit the \`event-name\` event to the \`main\` window</span></span>
<span class="line"><span style="color:#24292E;">      main_window</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">emit</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;event-name&quot;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Payload</span><span style="color:#24292E;"> { message</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Tauri is awesome!&quot;</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">into</span><span style="color:#24292E;">() })</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">unwrap</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">Ok</span><span style="color:#24292E;">(())</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">invoke_handler</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">tauri</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">generate_handler!</span><span style="color:#24292E;">[init_process])</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">tauri</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">generate_context!</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;failed to run app&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div>`,21),e=[o];function t(c,r,y,i,E,u){return n(),a("div",null,e)}const b=s(p,[["render",t]]);export{F as __pageData,b as default};
