import{_ as t,o as r,c as e,Q as a}from"./chunks/framework.ab7e7ee0.js";const m=JSON.parse('{"title":"Tauri","description":"","frontmatter":{},"headers":[{"level":1,"title":"Tauri","slug":"tauri","link":"#tauri","children":[{"level":2,"title":"序","slug":"序","link":"#序","children":[]}]}],"relativePath":"article/frontend/tauri/index.md","filePath":"article/frontend/tauri/index.md","lastUpdated":1707839101000}'),i={name:"article/frontend/tauri/index.md"},o=a('<h1 id="tauri" tabindex="-1">Tauri <a class="header-anchor" href="#tauri" aria-label="Permalink to &quot;Tauri&quot;">​</a></h1><p>新坑已开…</p><h2 id="序" tabindex="-1">序 <a class="header-anchor" href="#序" aria-label="Permalink to &quot;序&quot;">​</a></h2><p>根据两天的大致学习，对<code>Tauri</code>也有了一些自己的认识，其实<code>Tauri</code>和普通的前后端项目没多少区别，前端可以使用自己习惯的任何一个框架来做，比如<code>react,vue</code>等，后端使用的是<code>rust</code>。</p><p>当然学习这个玩意需要有一定的<code>rust</code>基础</p><p>下面的内容转自<code>lencx</code>的博客内容</p><p><img src="https://gitlab.com/lijing-2008/blogpic/-/raw/main/pictures/2022/12/20_11_43_28_image-20221220114328835.png" alt="image-20221220114328835"></p><ul><li><p><strong>核心（Core）</strong></p></li><li><ul><li><a href="https://link.zhihu.com/?target=https%3A//github.com/tauri-apps/tauri/tree/dev/core/tauri" target="_blank" rel="noreferrer">tauri</a> - 主条板箱（major crate）把所有东西（运行时、宏、实用程序和 API ）都集中在一起构成最终产品。在编译时读取 <a href="https://link.zhihu.com/?target=https%3A//tauri.studio/v1/api/config" target="_blank" rel="noreferrer">tauri.conf.json</a> 文件，以引入功能并进行应用程序的实际配置（包括项目中的 Cargo.toml 文件）。在运行时处理脚本注入（用于 polyfills/原型修改），托管系统交互的 API 及管理更新。</li><li><a href="https://link.zhihu.com/?target=https%3A//github.com/tauri-apps/tauri/tree/dev/core/tauri-runtime" target="_blank" rel="noreferrer">tauri-runtime</a> - Tauri 本身和较低级别的 webview 库之间的粘合层。</li><li><a href="https://link.zhihu.com/?target=https%3A//github.com/tauri-apps/tauri/tree/dev/core/tauri-macros" target="_blank" rel="noreferrer">tauri-macros</a> - 通过利用 <code>tauri-codegen</code> crate 为上下文、处理程序和命令创建宏。</li><li><a href="https://link.zhihu.com/?target=https%3A//github.com/tauri-apps/tauri/tree/dev/core/tauri-utils" target="_blank" rel="noreferrer">tauri-utils</a> - 在许多地方重用的通用代码，并提供有用的实用程序，例如解析配置文件、检测平台三元组（CPU 系列/型号的名称、供应商和操作系统名称）、注入 CSP 和管理资产。</li><li><a href="https://link.zhihu.com/?target=https%3A//github.com/tauri-apps/tauri/tree/dev/core/tauri-build" target="_blank" rel="noreferrer">tauri-build</a> - 在构建时应用宏，为 <code>cargo</code> 装配所需的一些特殊功能。</li><li><a href="https://link.zhihu.com/?target=https%3A//github.com/tauri-apps/tauri/tree/dev/core/tauri-codegen" target="_blank" rel="noreferrer">tauri-codegen</a> - 嵌入、散列和压缩资产，包括应用程序和系统托盘的图标。在编译时解析 <code>tauri.conf.json</code> 并生成配置结构。</li><li><a href="https://link.zhihu.com/?target=https%3A//github.com/tauri-apps/tauri/tree/dev/core/tauri-runtime-wry" target="_blank" rel="noreferrer">tauri-runtime-wry</a> - 专门为 WRY 开辟了直接的系统级交互，如打印、显示器检测和其他与窗口相关的任务。</li></ul></li><li><p><strong>上游条板箱（Upstream Crates）</strong> - Tauri-Apps 组织维护 Tauri 的两个“上游”板条箱，即用于创建和管理应用程序窗口的 TAO，以及用于与窗口内的 Webview 交互的 WRY。</p></li><li><ul><li><a href="https://link.zhihu.com/?target=https%3A//github.com/tauri-apps/tao" target="_blank" rel="noreferrer">TAO</a> - Rust 中的跨平台应用程序窗口创建库，支持 Windows、macOS、Linux、iOS 和 Android 等所有主要平台。它是用 Rust 编写的，是一个 <a href="https://link.zhihu.com/?target=https%3A//github.com/rust-windowing/winit" target="_blank" rel="noreferrer">winit</a> 的分支，根据需要进行了扩展，例如菜单栏和系统托盘。</li><li><a href="https://link.zhihu.com/?target=https%3A//github.com/tauri-apps/wry" target="_blank" rel="noreferrer">WRY</a> - WRY 是 Rust 中的跨平台 WebView 渲染库，支持 Windows、macOS 和 Linux 等所有主要桌面平台。 Tauri 使用 WRY 作为抽象层，负责确定使用哪个 webview（以及如何进行交互）。</li></ul></li></ul>',8),l=[o];function u(n,c,s,h,p,d){return r(),e("div",null,l)}const _=t(i,[["render",u]]);export{m as __pageData,_ as default};
