import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.ab7e7ee0.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"一、基础示例","slug":"一、基础示例","link":"#一、基础示例","children":[]},{"level":2,"title":"二、传递参数","slug":"二、传递参数","link":"#二、传递参数","children":[]},{"level":2,"title":"三、返回值","slug":"三、返回值","link":"#三、返回值","children":[]},{"level":2,"title":"四、错误处理","slug":"四、错误处理","link":"#四、错误处理","children":[]},{"level":2,"title":"五、异步指令","slug":"五、异步指令","link":"#五、异步指令","children":[]},{"level":2,"title":"六、在指令中获取Window实例","slug":"六、在指令中获取window实例","link":"#六、在指令中获取window实例","children":[]},{"level":2,"title":"七、在指令中获取AppHandle实例","slug":"七、在指令中获取apphandle实例","link":"#七、在指令中获取apphandle实例","children":[]},{"level":2,"title":"八、获取管理状态","slug":"八、获取管理状态","link":"#八、获取管理状态","children":[]},{"level":2,"title":"九、多指令","slug":"九、多指令","link":"#九、多指令","children":[]}],"relativePath":"article/frontend/tauri/特性/1.commands指令系统.md","filePath":"article/frontend/tauri/特性/1.commands指令系统.md","lastUpdated":1707839101000}'),p={name:"article/frontend/tauri/特性/1.commands指令系统.md"},o=l(`<blockquote><p>Tauri提供了一种简单而又强大的指令系统<code>command system</code>用来实现前端调用后端<code>rust</code>的函数方法，<code>commands</code>可以接收参数，也可以有返回值，它们可以返回错误，还可以是异步的。</p></blockquote><h2 id="一、基础示例" tabindex="-1">一、基础示例 <a class="header-anchor" href="#一、基础示例" aria-label="Permalink to &quot;一、基础示例&quot;">​</a></h2><p>指令是定义在后端的，使用<code>#[tauri::command]</code>声明的函数就是一个指令</p><div class="language-rust vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">#[tauri</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">command]</span></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">my_custom_command</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">println!</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;I was invoked from JS!&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">#[tauri</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">command]</span></span>
<span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">my_custom_command</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">println!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;I was invoked from JS!&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>指令需要注册后才能被前端调用，注册的位置如下：</p><div class="language-rust vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">tauri</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">Builder</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">default</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#6A737D;">    // This is where you pass in your commands</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">invoke_handler</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">tauri</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">generate_handler!</span><span style="color:#E1E4E8;">[my_custom_command])</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">tauri</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">generate_context!</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;failed to run app&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">tauri</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">Builder</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">default</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#6A737D;">    // This is where you pass in your commands</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">invoke_handler</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">tauri</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">generate_handler!</span><span style="color:#24292E;">[my_custom_command])</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">tauri</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">generate_context!</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;failed to run app&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>然后就可以在前端进行使用</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { invoke } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@tauri-apps/api/tauri&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// Invoke the command</span></span>
<span class="line"><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;my_custom_command&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { invoke } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@tauri-apps/api/tauri&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// Invoke the command</span></span>
<span class="line"><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;my_custom_command&#39;</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>invoke</code>函数返回的是一个<code>Promise</code>，在<code>.then()</code>里可以拿到<code>commands</code>返回的结果</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">declare</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#FFAB70;">cmd</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">args</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InvokeArgs</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Promise</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">declare</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt;(</span><span style="color:#E36209;">cmd</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#E36209;">args</span><span style="color:#D73A49;">?:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InvokeArgs</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Promise</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">T</span><span style="color:#24292E;">&gt;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="二、传递参数" tabindex="-1">二、传递参数 <a class="header-anchor" href="#二、传递参数" aria-label="Permalink to &quot;二、传递参数&quot;">​</a></h2><div class="language-rust vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">#[tauri</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">command]</span></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">my_custom_command</span><span style="color:#E1E4E8;">(invoke_message</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">println!</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;I was invoked from JS, with this message: {}&quot;</span><span style="color:#E1E4E8;">, invoke_message);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">#[tauri</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">command]</span></span>
<span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">my_custom_command</span><span style="color:#24292E;">(invoke_message</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">println!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;I was invoked from JS, with this message: {}&quot;</span><span style="color:#24292E;">, invoke_message);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>前端调用</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;my_custom_command&#39;</span><span style="color:#E1E4E8;">, { invokeMessage: </span><span style="color:#9ECBFF;">&#39;Hello!&#39;</span><span style="color:#E1E4E8;"> })</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;my_custom_command&#39;</span><span style="color:#24292E;">, { invokeMessage: </span><span style="color:#032F62;">&#39;Hello!&#39;</span><span style="color:#24292E;"> })</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>参数可以是任意类型的，只要他们实现了<code>serde::Deserialize</code>这个<code>trait</code>，即能被反序列化</p><div class="language-rust vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">#[derive(</span><span style="color:#B392F0;">Deserialize</span><span style="color:#E1E4E8;">)]</span></span>
<span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InlinePerson</span><span style="color:#E1E4E8;">&lt;&#39;</span><span style="color:#B392F0;">a</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">&#39;</span><span style="color:#B392F0;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">str</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">u8</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">#[command]</span></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">command_arguments_tuple_struct</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">InlinePerson</span><span style="color:#E1E4E8;">(name, age)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">InlinePerson</span><span style="color:#E1E4E8;">&lt;&#39;</span><span style="color:#B392F0;">_</span><span style="color:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">println!</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;received person tuple with name: {name} | age: {age}&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">#[derive(</span><span style="color:#6F42C1;">Deserialize</span><span style="color:#24292E;">)]</span></span>
<span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InlinePerson</span><span style="color:#24292E;">&lt;&#39;</span><span style="color:#6F42C1;">a</span><span style="color:#24292E;">&gt;(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">&#39;</span><span style="color:#6F42C1;">a</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">str</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">u8</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">#[command]</span></span>
<span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">command_arguments_tuple_struct</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">InlinePerson</span><span style="color:#24292E;">(name, age)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">InlinePerson</span><span style="color:#24292E;">&lt;&#39;</span><span style="color:#6F42C1;">_</span><span style="color:#24292E;">&gt;) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">println!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;received person tuple with name: {name} | age: {age}&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>**注意：**指令里的参数名如果是<code>snake</code>形式的，但是前端调用的时候传入的参数名确是驼峰形式的，这是默认的状态，如果想要让前端也使用<code>snake</code>形式参数名传参，需要对指令的声明进行修改如下<code>rename_all=&quot;snake_case&quot;</code>：</p><div class="language-rust vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">#[tauri</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">command(rename_all</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;snake_case&quot;</span><span style="color:#E1E4E8;">)]</span></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">my_custom_command</span><span style="color:#E1E4E8;">(invoke_message</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">println!</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;I was invoked from JS, with this message: {}&quot;</span><span style="color:#E1E4E8;">, invoke_message);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">#[tauri</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">command(rename_all</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;snake_case&quot;</span><span style="color:#24292E;">)]</span></span>
<span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">my_custom_command</span><span style="color:#24292E;">(invoke_message</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">println!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;I was invoked from JS, with this message: {}&quot;</span><span style="color:#24292E;">, invoke_message);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="三、返回值" tabindex="-1">三、返回值 <a class="header-anchor" href="#三、返回值" aria-label="Permalink to &quot;三、返回值&quot;">​</a></h2><div class="language-rust vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">#[tauri</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">command]</span></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">my_custom_command</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;Hello from Rust!&quot;</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">into</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">#[tauri</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">command]</span></span>
<span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">my_custom_command</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;Hello from Rust!&quot;</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">into</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>invoke</code>函数会返回一个<code>Promise</code>来处理返回值</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;my_custom_command&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">message</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(message))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;my_custom_command&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#E36209;">message</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(message))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>返回值可以是任意类型的，只要它实现了<code>serde::Serialize</code>这个<code>trait</code></p><div class="language-rust vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">#[derive(</span><span style="color:#B392F0;">Deserialize</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Serialize</span><span style="color:#E1E4E8;">)]</span></span>
<span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Person</span><span style="color:#E1E4E8;">&lt;&#39;</span><span style="color:#B392F0;">a</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">  name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">&#39;</span><span style="color:#B392F0;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">str</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  age</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">u8</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">#[command]</span></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">command_arguments_struct</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Person</span><span style="color:#E1E4E8;"> { name, age }</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Person</span><span style="color:#E1E4E8;">&lt;&#39;</span><span style="color:#B392F0;">_</span><span style="color:#E1E4E8;">&gt;) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Person</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">println!</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;received person struct with name: {name} | age: {age}&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Person</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    name,</span></span>
<span class="line"><span style="color:#E1E4E8;">    age</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">#[derive(</span><span style="color:#6F42C1;">Deserialize</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Serialize</span><span style="color:#24292E;">)]</span></span>
<span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">&lt;&#39;</span><span style="color:#6F42C1;">a</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">  name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">&#39;</span><span style="color:#6F42C1;">a</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">str</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  age</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">u8</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">#[command]</span></span>
<span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">command_arguments_struct</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;"> { name, age }</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">&lt;&#39;</span><span style="color:#6F42C1;">_</span><span style="color:#24292E;">&gt;) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">println!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;received person struct with name: {name} | age: {age}&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    name,</span></span>
<span class="line"><span style="color:#24292E;">    age</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><blockquote><p>其实很好理解，参数要实现<code>Deserialize</code>是因为前端穿过来的参数肯定是序列化之后的字符串数据，因此后端参数必须要实现<code>Deserialize</code>才能将参数反序列化，进行解析，返回结果要实现<code>Serilaize</code>是因为要序列化之后才能传递到前端去。</p></blockquote><h2 id="四、错误处理" tabindex="-1">四、错误处理 <a class="header-anchor" href="#四、错误处理" aria-label="Permalink to &quot;四、错误处理&quot;">​</a></h2><p>如果你的指令可能会执行失败，并需要返回一个错误到前端，那就返回<code>Result</code></p><div class="language-rust vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">#[tauri</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">command]</span></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">my_custom_command</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Result</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#6A737D;">  // If something fails</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Err</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;This failed!&quot;</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">into</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#6A737D;">  // If it worked</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">Ok</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;This worked!&quot;</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">into</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">#[tauri</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">command]</span></span>
<span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">my_custom_command</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Result</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#6A737D;">  // If something fails</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Err</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;This failed!&quot;</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">into</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#6A737D;">  // If it worked</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">Ok</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;This worked!&quot;</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">into</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>前端进行处理的时候使用<code>.then\\.catch</code>来接收结果和错误</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;my_custom_command&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">message</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(message))</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">catch</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">error</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> console.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(error))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;my_custom_command&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#E36209;">message</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(message))</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">((</span><span style="color:#E36209;">error</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> console.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(error))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="五、异步指令" tabindex="-1">五、异步指令 <a class="header-anchor" href="#五、异步指令" aria-label="Permalink to &quot;五、异步指令&quot;">​</a></h2><blockquote><p>异步指令是在一个单独的线程下执行的，使用的是<code>async_runtime::spawn</code>，异步指令有两种声明方式：</p><ul><li>使用<code>async</code>关键字，<code>async fn()</code></li><li>使用<code>#[tauri::command(async)]</code>声明</li></ul><p>其余所有的指令都是在<code>main</code>主线程中运行</p></blockquote><p>如果一个指令需要异步执行，只需要使用<code>async</code>来定义就可以</p><div class="language-rust vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">#[tauri</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">command]</span></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">my_custom_command</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#6A737D;">  // Call another async function and wait for it to finish</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">some_async_function</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">.await</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">println!</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Result: {}&quot;</span><span style="color:#E1E4E8;">, result);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">#[tauri</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">command]</span></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">my_custom_command</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#6A737D;">  // Call another async function and wait for it to finish</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">some_async_function</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">.await</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">println!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Result: {}&quot;</span><span style="color:#24292E;">, result);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>因为前端<code>invoke</code>函数本身就是返回一个<code>Promise</code>了，所以对它来说，后端<code>rust</code>的异步指令和其它指令一样，没有什么区别</p><h2 id="六、在指令中获取window实例" tabindex="-1">六、在指令中获取<code>Window</code>实例 <a class="header-anchor" href="#六、在指令中获取window实例" aria-label="Permalink to &quot;六、在指令中获取\`Window\`实例&quot;">​</a></h2><p>指令可以获取到<code>Window</code>的实例</p><div class="language-rust vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">#[tauri</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">command]</span></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">my_custom_command</span><span style="color:#E1E4E8;">(window</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">tauri</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">Window</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">println!</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Window: {}&quot;</span><span style="color:#E1E4E8;">, window</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">label</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">#[tauri</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">command]</span></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">my_custom_command</span><span style="color:#24292E;">(window</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tauri</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">Window</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">println!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Window: {}&quot;</span><span style="color:#24292E;">, window</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">label</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="七、在指令中获取apphandle实例" tabindex="-1">七、在指令中获取<code>AppHandle</code>实例 <a class="header-anchor" href="#七、在指令中获取apphandle实例" aria-label="Permalink to &quot;七、在指令中获取\`AppHandle\`实例&quot;">​</a></h2><div class="language-rust vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">#[tauri</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">command]</span></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">my_custom_command</span><span style="color:#E1E4E8;">(app_handle</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">tauri</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">AppHandle</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> app_dir </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> app_handle</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">path_resolver</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">app_dir</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">tauri</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">GlobalShortcutManager</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  app_handle</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">global_shortcut_manager</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;CTRL + U&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">move</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> {});</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">#[tauri</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">command]</span></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">my_custom_command</span><span style="color:#24292E;">(app_handle</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tauri</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">AppHandle</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> app_dir </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> app_handle</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">path_resolver</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">app_dir</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tauri</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">GlobalShortcutManager</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  app_handle</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">global_shortcut_manager</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">register</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;CTRL + U&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">move</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> {});</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="八、获取管理状态" tabindex="-1">八、获取管理状态 <a class="header-anchor" href="#八、获取管理状态" aria-label="Permalink to &quot;八、获取管理状态&quot;">​</a></h2><p><code>Tauri</code>可以使用<code>manage</code>函数管理一些状态参数，这些状态可以在指令中使用</p><div class="language-rust vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyState</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">#[tauri</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">command]</span></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">my_custom_command</span><span style="color:#E1E4E8;">(state</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">tauri</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">State</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">MyState</span><span style="color:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">assert_eq!</span><span style="color:#E1E4E8;">(state</span><span style="color:#F97583;">.</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;some state value&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">tauri</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">Builder</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">default</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">manage</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">MyState</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;some state value&quot;</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">into</span><span style="color:#E1E4E8;">()))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">invoke_handler</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">tauri</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">generate_handler!</span><span style="color:#E1E4E8;">[my_custom_command])</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">tauri</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">generate_context!</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;error while running tauri application&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyState</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">#[tauri</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">command]</span></span>
<span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">my_custom_command</span><span style="color:#24292E;">(state</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tauri</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">State</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">MyState</span><span style="color:#24292E;">&gt;) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">assert_eq!</span><span style="color:#24292E;">(state</span><span style="color:#D73A49;">.</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;some state value&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">tauri</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">Builder</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">default</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">manage</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">MyState</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;some state value&quot;</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">into</span><span style="color:#24292E;">()))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">invoke_handler</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">tauri</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">generate_handler!</span><span style="color:#24292E;">[my_custom_command])</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">tauri</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">generate_context!</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;error while running tauri application&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>注意：一个类型的状态只能维护一个，否则会报错如下：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">thread</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;main&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">panicked</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">at</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;state for type &#39;tauri_demo::MyState&#39; is already being managed&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">thread</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;main&#39;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">panicked</span><span style="color:#24292E;"> </span><span style="color:#032F62;">at</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;state for type &#39;tauri_demo::MyState&#39; is already being managed&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>可以链式调用维护多个状态，感觉可以用来存储数据库的连接信息之类的公共状态</p><h2 id="九、多指令" tabindex="-1">九、多指令 <a class="header-anchor" href="#九、多指令" aria-label="Permalink to &quot;九、多指令&quot;">​</a></h2><p><code>tauri::generate_handler!</code>宏接收一个数组，数组中放的是定义的各个指令，如果要注册多个指令，只需要把相应的指令添加到数组中就行，不能多次使用<code>invoke_handler</code>来注册指令，只有最后一次的会生效，所以记住，用一个<code>invoke_handler</code>和一个<code>tauri::generate_handler!</code>就足够了。</p><div class="language-rust vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">#[tauri</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">command]</span></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">cmd_a</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;Command a&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">#[tauri</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">command]</span></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">cmd_b</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;Command b&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">tauri</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">Builder</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">default</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">invoke_handler</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">tauri</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">generate_handler!</span><span style="color:#E1E4E8;">[cmd_a, cmd_b])</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">tauri</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">generate_context!</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;error while running tauri application&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">#[tauri</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">command]</span></span>
<span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cmd_a</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;Command a&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">#[tauri</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">command]</span></span>
<span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cmd_b</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;Command b&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">tauri</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">Builder</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">default</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">invoke_handler</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">tauri</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">generate_handler!</span><span style="color:#24292E;">[cmd_a, cmd_b])</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">tauri</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">generate_context!</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;error while running tauri application&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div>`,49),e=[o];function c(r,t,y,E,i,d){return n(),a("div",null,e)}const F=s(p,[["render",c]]);export{m as __pageData,F as default};
