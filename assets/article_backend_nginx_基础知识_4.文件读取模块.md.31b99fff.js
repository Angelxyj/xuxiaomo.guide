import{_ as s,o as a,c as e,Q as n}from"./chunks/framework.25ff06b1.js";const _=JSON.parse('{"title":"sendfile","description":"","frontmatter":{"author":"coder-li","tags":"nginx/modules/ngx_http_core_module 内核优化","aliases":"nginx文件读取"},"headers":[{"level":1,"title":"sendfile","slug":"sendfile","link":"#sendfile","children":[]},{"level":1,"title":"tcp_nopush","slug":"tcp-nopush","link":"#tcp-nopush","children":[]},{"level":1,"title":"tcp_nodelay","slug":"tcp-nodelay","link":"#tcp-nodelay","children":[]}],"relativePath":"article/backend/nginx/基础知识/4.文件读取模块.md","filePath":"article/backend/nginx/基础知识/4.文件读取模块.md","lastUpdated":1707839101000}'),l={name:"article/backend/nginx/基础知识/4.文件读取模块.md"},o=n('<p>用于加速系统内核拷贝文件，传输文件的</p><h1 id="sendfile" tabindex="-1">sendfile <a class="header-anchor" href="#sendfile" aria-label="Permalink to &quot;sendfile&quot;">​</a></h1><p>不使用sendfile模块时的拷贝流程 ==硬盘 -&gt; kernel buffer -&gt; user buffer -&gt; kernel socket buffer -&gt; 协议栈== ![[文件读取.excalidraw]]</p><p>使用sendfile模块时将不用再经过用户这一层，从硬盘直接读数据到内核态进行传输，减少切换次数且还能减少拷贝次数 该模块默认是开启的，如下主配置文件中 ![[nginx主配置文件#③ HTTP模块]]</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">sendfile</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">on</span><span style="color:#F97583;">|</span><span style="color:#B392F0;">off</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#模块开关，默认on</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">sendfile</span><span style="color:#24292E;"> </span><span style="color:#032F62;">on</span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">off</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#模块开关，默认on</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h1 id="tcp-nopush" tabindex="-1">tcp_nopush <a class="header-anchor" href="#tcp-nopush" aria-label="Permalink to &quot;tcp_nopush&quot;">​</a></h1><blockquote><p>应用程序每次请求都会发送一个包，典型情况下一个包将包括数据部分和40个字节的包头，如果数据只有1个字节，会很轻易造成资源浪费，容易造成网络拥塞 如果使用nopush，将大大提升网络传输效率，只有数据积累到一定数量才会发送，默认是关闭的，同样在[[nginx主配置文件#③ HTTP模块]]中</p></blockquote><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">tcp_nopush</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">on</span><span style="color:#F97583;">|</span><span style="color:#B392F0;">off</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 默认off</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">tcp_nopush</span><span style="color:#24292E;"> </span><span style="color:#032F62;">on</span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">off</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 默认off</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h1 id="tcp-nodelay" tabindex="-1">tcp_nodelay <a class="header-anchor" href="#tcp-nodelay" aria-label="Permalink to &quot;tcp_nodelay&quot;">​</a></h1><p>这个选项仅在长连接的情况下才被启用[[nginx连接状态模块#keepalive设置]] tcp_nodelay是禁用Nagle算法，即数据包立即发送出去，如果开启了tcp_nopush，则一般要把tcp_nodelay打开，为了让ack包立马发出去。为什么这么做呢，因为tcp/ip机制，如果没有在规定时间内收到ack包需要进行重传，但是可能因为打开了tcp_nopush造成ack没有即使发出引起不必要的重传。</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">tcp_no</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">on</span><span style="color:#F97583;">|</span><span style="color:#B392F0;">off</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 默认on</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">tcp_no</span><span style="color:#24292E;"> </span><span style="color:#032F62;">on</span><span style="color:#D73A49;">|</span><span style="color:#6F42C1;">off</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 默认on</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>',11),p=[o];function t(c,r,i,d,h,u){return a(),e("div",null,p)}const f=s(l,[["render",t]]);export{_ as __pageData,f as default};
