import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.ab7e7ee0.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"5.C++是如何运行的","slug":"_5-c-是如何运行的","link":"#_5-c-是如何运行的","children":[]},{"level":2,"title":"8.变量","slug":"_8-变量","link":"#_8-变量","children":[]},{"level":2,"title":"9.函数","slug":"_9-函数","link":"#_9-函数","children":[]},{"level":2,"title":"10.头文件","slug":"_10-头文件","link":"#_10-头文件","children":[]},{"level":2,"title":"11.指针和引用","slug":"_11-指针和引用","link":"#_11-指针和引用","children":[]},{"level":2,"title":"类和结构体","slug":"类和结构体","link":"#类和结构体","children":[]},{"level":2,"title":"数组","slug":"数组","link":"#数组","children":[]},{"level":2,"title":"对象实例化","slug":"对象实例化","link":"#对象实例化","children":[]}],"relativePath":"article/backend/CPP/基础知识/2.自学总结.md","filePath":"article/backend/CPP/基础知识/2.自学总结.md","lastUpdated":1707839101000}'),p={name:"article/backend/CPP/基础知识/2.自学总结.md"},o=l(`<blockquote><p><code>Good good study, day day up</code></p></blockquote><h2 id="_5-c-是如何运行的" tabindex="-1">5.C++是如何运行的 <a class="header-anchor" href="#_5-c-是如何运行的" aria-label="Permalink to &quot;5.C++是如何运行的&quot;">​</a></h2><p>首先，电脑无法直接运行<code>cpp</code>程序，<code>cpp</code>程序需要经过编译成机器码才可以运行，在<code>windows</code>下<code>cpp</code>文件会被编译为<code>.obj</code>文件，多个<code>obj</code>文件通过链接形成一个可执行文件从而可以运行。</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 这里是引入文件的作用其实就是把iostream文件完完整整复制到此文件中，这是在compile之前进行的</span></span>
<span class="line"><span style="color:#6A737D;">// 这一步操作称为preprocessor</span></span>
<span class="line"><span style="color:#F97583;">#include</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&lt;iostream&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 这里是一个函数声明，告诉编译器我们有这个函数，其实有没有并不知道</span></span>
<span class="line"><span style="color:#6A737D;">// 在build时，会进行链接link进行查找相应的函数，这个函数可能在另一个文件中</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello world&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 这里是引入文件的作用其实就是把iostream文件完完整整复制到此文件中，这是在compile之前进行的</span></span>
<span class="line"><span style="color:#6A737D;">// 这一步操作称为preprocessor</span></span>
<span class="line"><span style="color:#D73A49;">#include</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&lt;iostream&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 这里是一个函数声明，告诉编译器我们有这个函数，其实有没有并不知道</span></span>
<span class="line"><span style="color:#6A737D;">// 在build时，会进行链接link进行查找相应的函数，这个函数可能在另一个文件中</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">char</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello world&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>所以，整个阶段包含一下步骤：</p><p><code>pre-process</code>：预处理，一般常见的以#开头的都是预处理语句</p><p><code>compiling</code>：编译，将代码编译为机器码</p><p><code>linking</code>：链接</p><p>每一个<code>cpp</code>文件（如果不包含其他cpp文件）也叫做<code>translation unity</code>（编译单元）都会被编译为一个<code>obj</code>文件</p><h2 id="_8-变量" tabindex="-1">8.变量 <a class="header-anchor" href="#_8-变量" aria-label="Permalink to &quot;8.变量&quot;">​</a></h2><p><code>variables</code></p><h2 id="_9-函数" tabindex="-1">9.函数 <a class="header-anchor" href="#_9-函数" aria-label="Permalink to &quot;9.函数&quot;">​</a></h2><p><code>functions</code></p><h2 id="_10-头文件" tabindex="-1">10.头文件 <a class="header-anchor" href="#_10-头文件" aria-label="Permalink to &quot;10.头文件&quot;">​</a></h2><p><code>xx.h</code></p><p>头文件一般放置声明，为防止重复定义，有两种方式</p><ul><li><code>#pragma once</code></li><li><code>#Ifdef 。。。。。。 #endif</code></li></ul><p>在<code>cpp</code>文件中只需要引入进行，<code>include &#39;xxx.h&#39;</code></p><h2 id="_11-指针和引用" tabindex="-1">11.指针和引用 <a class="header-anchor" href="#_11-指针和引用" aria-label="Permalink to &quot;11.指针和引用&quot;">​</a></h2><p>指针其实就是一个整数，这个整数是一个地址，地址里面存储着具体的数据，一般地址都是形如<code>0x.....</code>的形式，<code>&amp;</code>符号可以取到一个变量的地址</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">int*</span><span style="color:#E1E4E8;"> ptr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">a;</span></span>
<span class="line"><span style="color:#6A737D;">// ptr: 0x7ff7ba7a5d38</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">int*</span><span style="color:#24292E;"> ptr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">a;</span></span>
<span class="line"><span style="color:#6A737D;">// ptr: 0x7ff7ba7a5d38</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>引用，其实是指针的一个语法糖，引用必须引用一个已经存在的变量，定义一个引用使用<code>&amp;</code>符号，一个常用用法：</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">increment</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">num</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">    num</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> var </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> ptr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">var;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">LOG</span><span style="color:#E1E4E8;">(ptr);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">increment</span><span style="color:#E1E4E8;">(var);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">LOG</span><span style="color:#E1E4E8;">(var);</span><span style="color:#6A737D;"> // 9</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">increment</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int&amp;</span><span style="color:#24292E;"> </span><span style="color:#E36209;">num</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    num</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> var </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> ptr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">var;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">LOG</span><span style="color:#24292E;">(ptr);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">increment</span><span style="color:#24292E;">(var);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">LOG</span><span style="color:#24292E;">(var);</span><span style="color:#6A737D;"> // 9</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>一个引用只能引用一个变量</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">int&amp;</span><span style="color:#E1E4E8;"> ref </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a;</span></span>
<span class="line"><span style="color:#B392F0;">LOG</span><span style="color:#E1E4E8;">(ref);</span><span style="color:#6A737D;"> // 1</span></span>
<span class="line"><span style="color:#E1E4E8;">ref </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> b;</span><span style="color:#6A737D;"> //这里是赋值了，并不是修改引用</span></span>
<span class="line"><span style="color:#B392F0;">LOG</span><span style="color:#E1E4E8;">(ref);</span><span style="color:#6A737D;"> // 8</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">int&amp;</span><span style="color:#24292E;"> ref </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> a;</span></span>
<span class="line"><span style="color:#6F42C1;">LOG</span><span style="color:#24292E;">(ref);</span><span style="color:#6A737D;"> // 1</span></span>
<span class="line"><span style="color:#24292E;">ref </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> b;</span><span style="color:#6A737D;"> //这里是赋值了，并不是修改引用</span></span>
<span class="line"><span style="color:#6F42C1;">LOG</span><span style="color:#24292E;">(ref);</span><span style="color:#6A737D;"> // 8</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="类和结构体" tabindex="-1">类和结构体 <a class="header-anchor" href="#类和结构体" aria-label="Permalink to &quot;类和结构体&quot;">​</a></h2><ul><li>类和结构体的区别（类默认private，结构体默认public）</li><li>派生类（class A: public B），虚函数（用于派生类重写基类的方法），纯虚函数（类似java、c#的接口，c++中没有interface关键字都是class）</li><li>构造函数（实例对象构造时执行），析构函数（实例对象销毁时执行）</li><li>可见性，public&gt;protected&gt;private</li><li></li></ul><h2 id="数组" tabindex="-1">数组 <a class="header-anchor" href="#数组" aria-label="Permalink to &quot;数组&quot;">​</a></h2><p>原生数组需要自己维护长度，编译时必须要知道明确的长度</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> ArraySize </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> example[ArraySize];</span></span>
<span class="line"><span style="color:#6A737D;">// example是一个指针，指向数组的第一个元素所在的地址</span></span>
<span class="line"><span style="color:#F97583;">int*</span><span style="color:#E1E4E8;"> ptr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> example;</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">; </span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">i) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  example[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> i;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">example[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">(ptr</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">9</span><span style="color:#E1E4E8;">;</span><span style="color:#6A737D;"> //example[2] = 9</span></span>
<span class="line"><span style="color:#6A737D;">// ptr指针在进行+2操作时需要计算字节长度，首先根据数据类型计算单个元素的字节，int为4字节，所以+2其实</span></span>
<span class="line"><span style="color:#6A737D;">// 是往后加了8个字节</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> ArraySize </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> example[ArraySize];</span></span>
<span class="line"><span style="color:#6A737D;">// example是一个指针，指向数组的第一个元素所在的地址</span></span>
<span class="line"><span style="color:#D73A49;">int*</span><span style="color:#24292E;"> ptr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> example;</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">; </span><span style="color:#D73A49;">++</span><span style="color:#24292E;">i) {</span></span>
<span class="line"><span style="color:#24292E;">  example[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">example[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">*</span><span style="color:#24292E;">(ptr</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">9</span><span style="color:#24292E;">;</span><span style="color:#6A737D;"> //example[2] = 9</span></span>
<span class="line"><span style="color:#6A737D;">// ptr指针在进行+2操作时需要计算字节长度，首先根据数据类型计算单个元素的字节，int为4字节，所以+2其实</span></span>
<span class="line"><span style="color:#6A737D;">// 是往后加了8个字节</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>std::array具有size()方法获取数组长度</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">std</span><span style="color:#E1E4E8;">::array</span><span style="color:#F97583;">&lt;int</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> another;</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> another.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">(); </span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">i) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  another[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">std</span><span style="color:#24292E;">::array</span><span style="color:#D73A49;">&lt;int</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> another;</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> another.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">(); </span><span style="color:#D73A49;">++</span><span style="color:#24292E;">i) {</span></span>
<span class="line"><span style="color:#24292E;">  another[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="对象实例化" tabindex="-1">对象实例化 <a class="header-anchor" href="#对象实例化" aria-label="Permalink to &quot;对象实例化&quot;">​</a></h2><p>对象实例化有两种方式，一种是创建在栈上，一种是创建在堆上，栈上创建速度快性能高，如果对象占用空间不是特别大，也没有生命周期的控制需求，那就创建在栈上，否则创建在堆上。</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">Entity</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">e</span><span style="color:#E1E4E8;">(...);</span><span style="color:#6A737D;"> //栈上</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 堆上,不用的时候要手动删除</span></span>
<span class="line"><span style="color:#E1E4E8;">Entity</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> entity </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Entity</span><span style="color:#E1E4E8;">(...);</span></span>
<span class="line"><span style="color:#F97583;">delete</span><span style="color:#E1E4E8;"> entity;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">Entity</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">e</span><span style="color:#24292E;">(...);</span><span style="color:#6A737D;"> //栈上</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 堆上,不用的时候要手动删除</span></span>
<span class="line"><span style="color:#24292E;">Entity</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> entity </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Entity</span><span style="color:#24292E;">(...);</span></span>
<span class="line"><span style="color:#D73A49;">delete</span><span style="color:#24292E;"> entity;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><code>new</code>做了两件事情：一是分配内存，二是调用构造函数</p><p><code>placement new</code>可以让<code>new</code>只是调用了构造函数，不分配内存，而是使用一个预定义的内存空间</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int*</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">Entity</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> e </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;">(a) </span><span style="color:#B392F0;">Entity</span><span style="color:#E1E4E8;">();</span><span style="color:#6A737D;"> //a就是</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int*</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">Entity</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> e </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;">(a) </span><span style="color:#6F42C1;">Entity</span><span style="color:#24292E;">();</span><span style="color:#6A737D;"> //a就是</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><code>delete</code>做了两件事：一是释放内存，二是调用析构函数</p>`,39),e=[o];function c(r,t,i,y,E,d){return n(),a("div",null,e)}const m=s(p,[["render",c]]);export{u as __pageData,m as default};
